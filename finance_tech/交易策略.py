# -*- coding: utf-8 -*-
"""交易策略.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f1kTWou4wyDv6fpnw8Ppthg9RQ51nUCE
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pandas
!pip install numpy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/金融大數據/交易策略_累積收益/AAPL_2.csv')
df.index = pd.to_datetime(df['Date'])
df = df.drop(['Date','Adj Close'], axis=1)
df.head()

#計算技術指標
def sma_cal(close_p, days):
    sma = pd.Series([np.nan]*len(close_p), index=close_p.index)
    for i in range(days,len(close_p)+1): #i從第5天～一年的最後一天
        sma[i-1] = np.mean(close_p[(i-days):(i)]) #從sma[4]開始存入sma值，sma[4]值=0~4的收盤價/5
    return sma 

sma5_AAPL = sma_cal(close_p=df["Close"], days=5)#5日均線
sma10_AAPL = sma_cal(close_p=df["Close"], days=10)#10週均線
sma20_AAPL = sma_cal(close_p=df["Close"], days=20)#20月均線
sma60_AAPL = sma_cal(close_p=df["Close"], days=60)#60季均線

df = df.assign(sma5 = sma5_AAPL, sma10 = sma10_AAPL, sma20 = sma20_AAPL, sma60 = sma60_AAPL)


def rsi_cal(close_p, days):
  close = close_p.shift(1)
  change = close - close.shift(1)#計算跟昨天收盤價的差距
  change.dropna(inplace=True)#變數就地改變 每回合清空

  up_price = pd.Series(0.0,index=change.index)
  up_price[change>0] = change[change>0]

  down_price = pd.Series(0.0,index=change.index)
  down_price[change<0] = -change[change<0]

  rsi_data = pd.concat([close, change, up_price, down_price], axis=1)
  rsi_data.columns = ['close','change','up_price','down_price']
  rsi_data.dropna(inplace=True)
  rsi = pd.Series([np.nan]*len(change),index=change.index)

  for i in range(days,len(rsi)+1):#平均上漲/平均上漲+平均下跌 *100
      rsi[i-1] = 100 * np.mean(rsi_data['up_price'][i-days:i]) / ( np.mean(rsi_data['up_price'][i-days:i]) + np.mean(rsi_data['down_price'][i-days:i]) ) 
  return rsi

rsi_6_AAPL = rsi_cal(close_p=df['Close'], days=6)
rsi_12_AAPL = rsi_cal(close_p=df['Close'], days=12)
df = df.assign(rsi_6 = rsi_6_AAPL, rsi_12 = rsi_12_AAPL)

def Macd(data):
  ema12 = data['Close'].ewm(span = 12).mean()
  ema26 = data['Close'].ewm(span = 26).mean()
  dif = ema12  - ema26#快線
  macd = dif.ewm(span = 9).mean()#慢線
  dea = dif - macd #柱線
  return dea
macd_AAPL = Macd(df)
df = df.assign(macd = macd_AAPL)

def kd_cal(stock):
    close = stock['Close']
    high = stock['High']
    low = stock['Low']

    highest = pd.Series(data=np.nan,index=stock.index)
    lowest = pd.Series(data=np.nan,index=stock.index)
    RSV = pd.Series(data=np.nan,index=stock.index)
    
    for i in range(8,len(highest)):#從第9天起算
        highest[i] = np.max(high[i-8:i+1]) #9日最高價
        lowest[i] = np.min(low[i-8:i+1]) #9日最低價
        RSV[i] = 100 * (close[i] - lowest[i]) / (highest[i] - lowest[i]) #RSV公式：(今日價-9日最低價)/(9日最高價-9日最低價)*100
        
    close_RSV = pd.DataFrame(data={'close': close, 'RSV': RSV}) #二維資料 每日收盤價對應的rsv
    close_RSV.dropna(inplace=True) #rsv[0~7]都沒有值
    #print(close_RSV)

    K = pd.Series(data=np.nan,index=close_RSV.index)
    D = pd.Series(data=np.nan,index=close_RSV.index)
    K[7] = 77.47 #從yahoo finance看2021/8/13的KD值 (8/4是第1天(k[0])->8/13是8天(k[7])，也就是8/16(k[8])的前一天)
    D[7] = 61.97
    
    for i in range(8,len(K)):#從21/8/16(第9天)開始算KD值，因為rsv第9天才有值
        K[i] = (2/3)*K[i-1] + (1/3)*close_RSV['RSV'][i] #2/3*昨天的K + 1/3*今日rsv
        D[i] = (2/3)*D[i-1] + (1/3)*K[i] #2/3*昨天的D + 1/3*今日的K
        
    return K,D

k_AAPL, d_AAPL = kd_cal(df)
df = df.assign(k = k_AAPL, d = d_AAPL)
df.dropna(inplace=True)
df

kd_signal = pd.Series(data=0, index=df.index)
for i in range(0, len(df.index)):
  if df['k'][i-1] < df['d'][i-1] and df['k'][i] > df['d'][i]:
    kd_signal[i] = 1
  elif df['k'][i-1] > df['d'][i-1] and df['k'][i] < df['d'][i]:
    kd_signal[i] = -1
  else:
    kd_signal[i] = 0
kd_signal

rsi_signal = pd.Series(data=0, index=df.index)
for i in range(0, len(df.index)):
  if df['rsi_6'][i-1] < df['rsi_12'][i-1] and df['rsi_6'][i] > df['rsi_12'][i]:
    rsi_signal[i] = 1
  elif df['rsi_6'][i-1] > df['rsi_12'][i-1] and df['rsi_6'][i] < df['rsi_12'][i]:
    rsi_signal[i] = -1
  else:
    rsi_signal[i] = 0
rsi_signal

macd_signal = pd.Series(data=0, index=df.index)
for i in range(0, len(df.index)):
  if df['macd'][i-1]<0 and df['macd'][i]>0:
    macd_signal[i] = 1
  elif df['macd'][i-1]>0 and df['macd'][i]<0:
    macd_signal[i] = -1
  else:
    macd_signal[i] = 0
macd_signal

#策略1：macd, rsi, kd 任一指標黃金交叉=買，死亡交叉=賣
trade_strategy = pd.Series(data=0, index=df.index)
for i in range(0, len(df.index)):
  if macd_signal[i]==1 or rsi_signal[i] ==1 or kd_signal[i]==1:
    trade_strategy[i] =1
  elif macd_signal[i]==-1 or rsi_signal[i] ==-1 or kd_signal[i]==-1:
    trade_strategy[i] =-1
  else:
    trade_strategy[i] =0
trade_strategy

#策略2
trade_strategy2 = pd.Series(data=0, index=df.index)
for i in range(0, len(df.index)):
  if df['rsi_12'][i]>60 and df['macd'][i]>0:
    trade_strategy2[i] =1
  elif df['rsi_12'][i]<40 and df['macd'][i]<0:
    trade_strategy2[i] =-1
  else:
    trade_strategy2[i] =0
print(trade_strategy2[trade_strategy2==1], trade_strategy2[trade_strategy2==-1])
#print(trade_strategy2[trade_strategy2==-1])

hold2 = pd.Series(data=0, index=df.index)
hold2[trade_strategy2==1] =1
hold1 = pd.Series(data=0, index=df.index)
hold1[trade_strategy==1] =1
print(hold2[hold2==1], hold1[hold1==1])

for i in range(1, len(trade_strategy2)):
  if hold2[i-1]==1 and trade_strategy2[i]!=-1:
    hold2[i]=1
  elif hold2[i-1]==1 and trade_strategy2[i] ==-1:
    hold2[i]=0
  else:
    pass

for i in range(1, len(trade_strategy)):
  if hold1[i-1]==1 and trade_strategy[i]!=-1:
    hold1[i]=1
  elif hold1[i-1]==1 and trade_strategy[i]==-1:
    hold1[i]=0
  else:
    pass

#持股時間
plt.figure(figsize=(15,5))
plt.subplot(211)
plt.plot(hold2)
plt.title('strategy2')
plt.subplot(212)
plt.plot(hold1)
plt.title('strategy1')
plt.show()

rsi_macd = pd.DataFrame(data={'close':df['Close'],'rsi':df['rsi_6'],'macd':df['macd']})
rsi_macd

ret = (rsi_macd['close'].shift(-1)-rsi_macd['close']) / rsi_macd['close']
ret

rsi_macd = pd.DataFrame(data={'close':df['Close'],'rsi':df['rsi_6'],'macd':df['macd'],'ret':ret})
rsi_macd

#cum_ret = np.cumprod(rsi_macd['ret']+1)-1
cum_ret = (1+ret).cumprod()-1
strategy_ret2 = rsi_macd['ret'] * hold2
strategy_ret1 = rsi_macd['ret'] * hold1
cum_strategy_ret2 = (1+strategy_ret2).cumprod()-1
cum_strategy_ret1 = (1+strategy_ret1).cumprod()-1
print(cum_ret, cum_strategy_ret2, cum_strategy_ret1)

plt.figure(figsize=(15,5))
plt.plot(cum_strategy_ret2,'r-', label='strategy2')
plt.plot(cum_strategy_ret1,'b-', label='strategy1')
plt.plot(cum_ret,'g-', label='baseline')
plt.title('AAPL accumulate return')
plt.ylabel('return rate')
plt.legend()
plt.show()