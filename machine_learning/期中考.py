# -*- coding: utf-8 -*-
"""期中考.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T1ncdyEVgWVoctLwzeLiS-rvZllBJKyn
"""

from google.colab import drive
drive.mount('/content/drive')

import sklearn
from sklearn.model_selection import train_test_split, cross_val_score, cross_validate, GridSearchCV, RandomizedSearchCV, KFold
from sklearn.preprocessing import LabelBinarizer, LabelEncoder, StandardScaler, Normalizer, RobustScaler
from sklearn.feature_selection import VarianceThreshold
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn import metrics, svm
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import numpy as np

df_index = ['age','workclass','fnlwgt','education','education-num','marital-status','occupation','relationship','race','sex','capital-gain','capital-loss','hours-per-week','native-country','income']
df = pd.read_csv('/content/drive/MyDrive/機器學習/adult.data', delimiter = ",", names=df_index)
print(df, df.isnull().sum(),df.shape)

df_test_index = ['age','workclass','fnlwgt','education','education-num','marital-status','occupation','relationship','race','sex','capital-gain','capital-loss','hours-per-week','native-country','income']
df_test = pd.read_csv('/content/drive/MyDrive/機器學習/adult.test', delimiter = ",", names=df_test_index)
df_test = df_test.dropna()
print(df_test)
print(df_test.isnull().sum(),df_test.shape, type(df_test['age'][1]))

df_test['age'] = df_test['age'].astype(int)

df_test['age']

'''
df = df.drop(['spore-print-color', 'stem-root','veil-color','veil-type','stem-surface','stem-root'], axis=1)
print(df.isnull().sum(),df.shape)
'''

"""補missing value"""
'''
df_test['workclass'].fillna(df_test['workclass'].mode()[0], inplace=True)
print(df_test.isnull().sum())
print(type(df_test['age'][0]), type(df['age'][0]))
'''

for i in range(0,15):
  print(df.columns[i], df[df.columns[i]].unique())
print('======df_test unique=======')
for i in range(0,15): 
  print(df_test.columns[i], df[df_test.columns[i]].unique())

lb = LabelEncoder()
df.iloc[:,1] = lb.fit_transform(df.iloc[:,1])
df.iloc[:,3] = lb.fit_transform(df.iloc[:,3])
df.iloc[:,5] = lb.fit_transform(df.iloc[:,5])
df.iloc[:,6] = lb.fit_transform(df.iloc[:,6])
df.iloc[:,7] = lb.fit_transform(df.iloc[:,7])
df.iloc[:,8] = lb.fit_transform(df.iloc[:,8])
df.iloc[:,9] = lb.fit_transform(df.iloc[:,9])
df.iloc[:,13] = lb.fit_transform(df.iloc[:,13])
df.iloc[:,14] = lb.fit_transform(df.iloc[:,14])

df_test.iloc[:,1] = lb.fit_transform(df_test.iloc[:,1])
df_test.iloc[:,3] = lb.fit_transform(df_test.iloc[:,3])
df_test.iloc[:,5] = lb.fit_transform(df_test.iloc[:,5])
df_test.iloc[:,6] = lb.fit_transform(df_test.iloc[:,6])
df_test.iloc[:,7] = lb.fit_transform(df_test.iloc[:,7])
df_test.iloc[:,8] = lb.fit_transform(df_test.iloc[:,8])
df_test.iloc[:,9] = lb.fit_transform(df_test.iloc[:,9])
df_test.iloc[:,13] = lb.fit_transform(df_test.iloc[:,13])
df_test.iloc[:,14] = lb.fit_transform(df_test.iloc[:,14])
print(df,df_test)

for i in range(0,len(df['age'])):
  if df['age'][i]>=10 and df['age'][i]<=20:
    df['age'][i] = 1
  elif df['age'][i]>=21 and df['age'][i]<=30:
    df['age'][i] = 2
  elif df['age'][i]>=31 and df['age'][i]<=40:
    df['age'][i] = 3
  elif df['age'][i]>=41 and df['age'][i]<=50:
    df['age'][i] = 4
  elif df['age'][i]>=51 and df['age'][i]<=60:
    df['age'][i] = 5
  elif df['age'][i]>=61 and df['age'][i]<=70:
    df['age'][i] = 6
  elif df['age'][i]>=71 and df['age'][i]<=80:
    df['age'][i] = 7
  elif df['age'][i]>=81 and df['age'][i]<=90:
    df['age'][i] = 8
  else:
    pass

df_test['age'] = df_test['age'].astype(int)
for i in range(1,len(df_test['age'])+1):
  if df_test['age'][i]>=10 and df_test['age'][i]<=20:
    df_test['age'][i] = 1
  elif df_test['age'][i]>=21 and df_test['age'][i]<=30:
    df_test['age'][i] = 2
  elif df_test['age'][i]>=31 and df_test['age'][i]<=40:
    df_test['age'][i] = 3
  elif df_test['age'][i]>=41 and df_test['age'][i]<=50:
    df_test['age'][i] = 4
  elif df_test['age'][i]>=51 and df_test['age'][i]<=60:
    df_test['age'][i] = 5
  elif df_test['age'][i]>=61 and df_test['age'][i]<=70:
    df_test['age'][i] = 6
  elif df_test['age'][i]>=71 and df_test['age'][i]<=80:
    df_test['age'][i] = 7
  elif df_test['age'][i]>=81 and df_test['age'][i]<=90:
    df_test['age'][i] = 8
  else:
    pass

print(df['age'], df_test['age'])

for i in range(0,15):
  print(df.columns[i], df[df.columns[i]].unique())

x = np.array(df.iloc[:,0:-2]) #x
y = df.iloc[:,-1] #y
x_test = np.array(df_test.iloc[:,0:-2]) #test x
y_test = df_test.iloc[:,-1] #test y
ss = StandardScaler()
scaled_data = ss.fit_transform(np.array(x).reshape(-1,13))
scaled_test = ss.fit_transform(np.array(x_test).reshape(-1,13))
print('scaled_data:', scaled_data, scaled_data.shape)
print('scaled_test:',scaled_test, scaled_test.shape)

from sklearn.preprocessing import PolynomialFeatures
pf = PolynomialFeatures(degree=3)
xp = pf.fit_transform(scaled_data)
x_test_p = pf.fit_transform(scaled_test)
print('===x data polynomial====')
print(xp, xp.shape)
print('===x test polynomial====')
print(x_test_p, x_test_p.shape)

pca = PCA(n_components=10)
x_pca = pca.fit_transform(xp)
x_test_pca = pca.fit_transform(x_test_p)
print('x data pca:\n',x_pca)
print('x test pca:\n',x_test_pca)
print('x data pca variance:\n',x_pca.var(axis=0))
print('x test pca variance:\n',x_test_pca.var(axis=0))

#x_train_1, x_test_1, y_train_1, y_test_1 = train_test_split(x_pca, y, test_size=0.2, random_state=1000)
lr = LinearRegression()
lr.fit(x, y)
lr_y_pred = lr.predict(x_test)
lr_score = cross_val_score(lr, x, y, cv=3, scoring='accuracy')
print("linear y predict:", lr_y_pred)
lr_y_t = np.array(y_test).reshape(1,-1)
print("linear y test:", lr_y_t)
print(lr_score, lr_score.mean())

lg = LogisticRegression()
lg.fit(x, y)
lg_y_pred = lg.predict(x_test)
lg_score = cross_val_score(lg, x, y, cv=3, scoring='accuracy')
print("logistic y predict:", lg_y_pred)
lg_y_t = np.array(y_test).reshape(1,-1)
print("logistic y test:", lg_y_t)
print(lg_score, lg_score.mean())

x_pca_1 = pca.fit_transform(scaled_data)
x_test_pca_1 = pca.fit_transform(scaled_test)
print('x data pca:\n',x_pca_1)
print('x test pca:\n',x_test_pca_1)
print('x data pca variance:\n',x_pca_1.var(axis=0))
print('x test pca variance:\n',x_test_pca_1.var(axis=0))

lr_1 = LinearRegression()
lr_1.fit(x_pca_1, y)
lr_y_pred_1 = lr_1.predict(x_test_pca_1)
lr_score_1 = cross_val_score(lr_1, x_pca_1, y, cv=3, scoring='accuracy')
print("linear y predict:", lr_y_pred_1)
lr_y_t_1 = np.array(y_test).reshape(1,-1)
print("linear y test:", lr_y_t_1)
print(lr_score_1, lr_score_1.mean())

lg_1 = LogisticRegression()
lg_1.fit(x_pca_1, y)
lg_y_pred_1 = lg_1.predict(x_test_pca_1)
lg_score_1 = cross_val_score(lg_1, x_pca_1, y, cv=3, scoring='accuracy')
print("logistic y predict:", lg_y_pred_1)
lg_y_t_1 = np.array(y_test).reshape(1,-1)
print("logistic y test:", lg_y_t_1)
print(lg_score_1, lg_score_1.mean())
